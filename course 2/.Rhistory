ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
sample_means50
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
sample_means50
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for the Exercise here, and Run Document
count(sample_means50)
# type your code for the Exercise here, and Run Document
count(sample_means50)
mean(sample_means50)
# type your code for the Exercise here, and Run Document
count(sample_means50)
mean(sample_means50,na.rm = TRUE)
# type your code for the Exercise here, and Run Document
count(sample_means50)
mean(sample_means50$x_bar)
# type your code for the Exercise here, and Run Document
sample_mean_small<- ames %>%
rep_sample_n(area,size = 10,replace = TRUE,25)
# type your code for the Exercise here, and Run Document
sample_mean_small<- ames %>%
rep_sample_n(area,size = 10,replace = TRUE,reps=25)
# type your code for the Exercise here, and Run Document
sample_mean_small<- ames %>%
rep_sample_n(tbl=area,size = 10,replace = TRUE,reps=25)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
count(sample_mean_small)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram()
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 250)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 150)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 100)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 50)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 90)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 100)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 150)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 170)
# type your code for the Exercise here, and Run Document
sample_mean_small <- ames %>%
rep_sample_n(size = 10,replace = TRUE,reps=25) %>%
summarise(xbar=mean(area))
ggplot(data=sample_mean_small,aes(x=xbar))+geom_histogram(binwidth = 150)
# type your code for Question 3 here, and Run Document
count(sample_mean_small)
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
View(server)
View(ui)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample(size = 50)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample(price,size = 50)
View(sample_mean_small)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample_n(size = 50) %>%
summarise(price=price)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample_n(size = 50) %>%
select(pric=price)
View(price_sample)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample_n(size = 50) %>%
select(price=price)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample_n(size = 50) %>%
select(price=price)
mean(price_sample)
# type your code for this Exercise here, and Run Document
price_sample <- ames %>%
sample_n(size = 50) %>%
select(price=price)
mean(price_sample$price)
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
suumarise(x_bar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
suumarise(x_bar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
suumarise(xbar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
suumarise(xbar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
sumarise(xbar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
price_samp_50
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
mean(price_samp_50)
# type your code for this Exercise here, and Run Document
price_samp_50 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
mean(price_samp_50$xbar)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 100)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 150)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 250)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 50)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 500)
ggplot(data=price_samp_50,aes(x=xbar))+geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
sample_mean150 <- ames %>%
sample_n(size = 50) %>%
select(price=price)
mean(sample_mean150$price)
# type your code for this Exercise here, and Run Document
sample_mean150 <- ames %>%
rep_sample_n(size=50,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
mean(sample_mean150$xbar)
# type your code for this Exercise here, and Run Document
sample_mean150 <- ames %>%
rep_sample_n(size=150,replace = TRUE,reps=5000) %>%
summarise(xbar=mean(price))
mean(sample_mean150$xbar)
ggplot(data=sample_mean150,aes(x=xbar))+geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
str(ames)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
